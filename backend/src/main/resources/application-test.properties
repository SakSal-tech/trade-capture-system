## Use an in-memory H2 database for tests so each run starts with a clean, ephemeral DB.
## The URL below creates an in-memory database named 'testdb', keeps it open until the JVM exits,
## and configures H2 to behave similarly to PostgreSQL in terms of SQL dialect and case handling.
spring.datasource.url=jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;MODE=PostgreSQL;DATABASE_TO_LOWER=TRUE;DEFAULT_NULL_ORDERING=HIGH

## Specify the JDBC driver class for H2 so Spring Boot knows which driver to use.
spring.datasource.driverClassName=org.h2.Driver

## Username for the in-memory database. For tests we use a simple default account.
spring.datasource.username=sa

## Password for the in-memory database. Keep simple in tests; do NOT use this in production.
spring.datasource.password=password

## Tell JPA/Hibernate to use the H2 dialect (SQL variant) so generated SQL is compatible with H2.
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

## Use create-drop so the schema is created at startup and dropped when the tests finish.
## This keeps tests isolated and avoids state leakage between runs.
spring.jpa.hibernate.ddl-auto=create-drop

## Do not print SQL statements during tests (keeps test logs less noisy). Set true if you need SQL debugging.
spring.jpa.show-sql=false

## Defer initializing the datasource until after JPA has set up the schema. Useful when using schema generation.
spring.jpa.defer-datasource-initialization=true

## Prevent Spring's automatic SQL initialisation scripts from running in the test profile.
## This avoids loading production data.sql/test fixtures unless explicitly desired by the test setup.
spring.sql.init.mode=never
